// Generated by CoffeeScript 1.8.0
var Promise, async, fs, logPrefix, migrator;

Promise = require('es6-promise').Promise;

fs = require('fs');

async = require('async');

logPrefix = 'migrator';

module.exports = migrator = {
  logger: console,
  database: null,
  directory: './migrations',
  tableName: 'schema_migrations',
  migrate: function(db) {
    var collectMigrations, createMigrationTable, executeMigrations, selectMigrations;
    createMigrationTable = function() {
      return new Promise(function(resolve, reject) {
        return db.query('select count(*) as cnt from information_schema.tables where lower(table_schema) = lower(?) and lower(table_name) = lower(?)', [migrator.database, migrator.tableName], function(err, rows) {
          if (err) {
            return reject(err);
          }
          if (rows[0].cnt) {
            return resolve();
          }
          migrator.logger.info('[%s] creating table %s', logPrefix, migrator.tableName);
          return db.query('create table #{migrator.tableName} (migration_id varchar(255) not null primary key, executed_at timestamp not null) engine=MyISAM', function(err) {
            if (err) {
              return reject(err);
            }
            return resolve();
          });
        });
      });
    };
    collectMigrations = function() {
      return new Promise(function(resolve, reject) {
        migrator.logger.debug('[%s] loading migrations from directory %s', logPrefix, migrator.directory);
        return fs.readdir(migrator.directory, function(err, files) {
          if (err) {
            return reject(err);
          }
          files = files.filter(function(f) {
            return f.match(/\.sql$/);
          });
          files = files.sort();
          return resolve(files);
        });
      });
    };
    selectMigrations = function(migrationIds) {
      var isApplied;
      isApplied = function(migrationId) {
        return new Promise(function(resolve, reject) {
          return db.query('select count(*) cnt from #{migrator.tableName} where migration_id = ?', [migrationId], function(err, rows) {
            if (err) {
              return reject(err);
            }
            return resolve(rows[0].cnt === 1);
          });
        });
      };
      return Promise.all(migrationIds.map(isApplied)).then(function(applied) {
        return migrationIds.filter(function(f, i) {
          return !applied[i];
        });
      });
    };
    executeMigrations = function(migrationIds) {
      var executeMigration;
      executeMigration = function(migrationId) {
        return function(next) {
          migrator.logger.info('[%s] executing migration %s', logPrefix, migrationId);
          return fs.readFile("" + migrator.directory + "/" + migrationId, {
            encoding: 'utf8'
          }, function(err, content) {
            var tasks;
            if (err) {
              return next(err);
            }
            tasks = content.split(/;/).filter(function(s) {
              return s.trim();
            }).map(function(statement) {
              return function(next) {
                return db.query(statement, next);
              };
            });
            return async.series(tasks, function(err) {
              if (err) {
                return next(err);
              }
              return db.query('insert into #{migrator.tableName} set ?', {
                migration_id: migrationId,
                executed_at: new Date
              }, next);
            });
          });
        };
      };
      return new Promise(function(resolve, reject) {
        var tasks;
        tasks = migrationIds.map(executeMigration);
        return async.series(tasks, function(err) {
          if (err) {
            return reject(err);
          }
          return resolve(migrationIds);
        });
      });
    };
    migrator.logger.info('[%s] migrating database %s...', logPrefix, migrator.database);
    return createMigrationTable().then(collectMigrations).then(selectMigrations).then(executeMigrations).then(function() {
      return migrator.logger.info('[%s] migration complete.', logPrefix);
    });
  }
};
